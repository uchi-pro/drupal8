<?php

use Drupal\uchi_pro\Exception\BadRoleException;
use Drupal\uchi_pro\Form\SettingsForm;
use Drupal\uchi_pro\Service\ImportCoursesService;
use UchiPro\ApiClient;
use UchiPro\Identity;

function uchi_pro_cron() {

  $settings = Drupal::config(SettingsForm::SETTINGS);

  $useCron = $settings->get('use_cron');
  if ($useCron) {
    try {
      $importCoursesService = new ImportCoursesService();
      $importCoursesService->importCourses();
    } catch (Exception $e) {
      watchdog_exception('error', $e);
    }
  }
}

function uchi_pro_get_url() {
  $settings = Drupal::config(SettingsForm::SETTINGS);
  return $settings->get('url');
}

function uchi_pro_get_access_token() {
  $settings = Drupal::config(SettingsForm::SETTINGS);
  return $settings->get('access_token');
}

/**
 * @return ApiClient
 */
function uchi_pro_get_api_client() {
  $url = uchi_pro_get_url();
  $access_token = uchi_pro_get_access_token();
  $identity = Identity::createByAccessToken($url, $access_token);

  return ApiClient::create($identity);
}

/**
 * @param string $url
 * @param string $access_token
 *
 * @throws BadRoleException
 */
function _uchi_pro_check_access_token($url, $access_token) {
  $identity = Identity::createByAccessToken($url, $access_token);

  $apiClient = ApiClient::create($identity);

  $me = $apiClient->users()->getMe();

  if (!in_array($me->role->id, ['manager'])) {
    throw new BadRoleException();
  }
}

/**
 * @param $url
 * @param $accessToken
 *
 * @return bool
 */
function _uchi_pro_leads_available($url, $accessToken) {
  $identity = Identity::createByAccessToken($url, $accessToken);
  $apiClient = ApiClient::create($identity);
  $usersApi = $apiClient->users();
  $vendorsApi = $apiClient->vendors();
  $me = $usersApi->getMe();
  $limits = $vendorsApi->getVendorLimits($me->vendor);
  return $limits->leadsEventsAvailable;
}

function uchi_pro_form_alter(&$form, &$form_state, $form_id) {
  if (uchi_pro_webform_necessary_handle($form)) {
    $form['actions']['submit']['#submit'][] = 'uchi_pro_webform_submit_handler';
  }
}

function uchi_pro_webform_submit_handler($form, &$form_state) {
  try {
    $values = $form_state->getValues();

    $apiClient = uchi_pro_get_api_client();
    $leadsApi = $apiClient->leads();

    $lead = new \UchiPro\Leads\Lead();
    if (!empty($values['name'])) {
      $lead->contactPerson = $values['name'];
    }
    if (!empty($values['email'])) {
      $lead->email = $values['email'];

      $usersApi = $apiClient->users();
      $contractor = $usersApi->findContractorByEmail($lead->email);
      if (!empty($contractor)) {
        $lead->contractor = $contractor;
      }
    }
    if (!empty($values['phone'])) {
      $lead->phone = $values['phone'];
    }

    if (!empty($values['course'])) {
      $node = \Drupal::entityTypeManager()->getStorage('node')->load($values['course']);
      $courseId = $node->get('field_course_id')->getString();
      if (!empty($courseId)) {
        $course = new \UchiPro\Courses\Course();
        $course->id = $courseId;
        $lead->courses = [$course];
      }
    }

    $leadsApi->save($lead);
  } catch (Exception $e) {
    watchdog_exception('uchi_pro', $e);
  }
}

/**
 * @param array $form
 *
 * @return bool
 */
function uchi_pro_webform_necessary_handle($form)
{
  if (!isset($form['#webform_id'])) {
    return false;
  }
  $webformId = $form['#webform_id'];

  if ($form['#form_id'] !== 'webform_submission_' . $webformId . '_add_form') {
    return false;
  }

  $settings = Drupal::config(SettingsForm::SETTINGS);
  $leadWebformsIds = $settings->get('leads_webforms');
  return is_array($leadWebformsIds) && in_array($webformId, $leadWebformsIds);
}
